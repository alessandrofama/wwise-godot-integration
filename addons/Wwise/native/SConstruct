#!python
import os, sys, subprocess, html, shutil

if sys.version_info < (3,):

    def decode_utf8(x):
        return x

else:
    import codecs

    def decode_utf8(x):
        return codecs.utf_8_decode(x)[0]
    
def print_section_header(title):
    print(f"\n\033[34m:: {title} ::\033[0m\n") 

def print_project_info(env):
    print(f"  Wwise SDK Path: {env.get('wwise_sdk', 'Not Defined')}")
    print(f"  Platform: {env.get('platform', 'Not Defined')}")
    print(f"  Target: {env.get('target', 'Not Defined')}")
    print(f"  Wwise Config: {env.get('wwise_config', 'Not Defined')}")
    print(f"  Dev Build: {env.get('dev_build', 'Not Defined')}")
    print(f"  Target Path: {os.path.abspath(env.get('target_path', 'Not Defined'))}")

# This is a modified version of the documentation generation function from godot-cpp in godotcpp.py.
# Unlike the original, this version writes the generated .cpp file directly to disk,
# rather than including it in the sources processed by the build system during the build stage.
def make_doc_source(target, source, env):
    import zlib
    if not os.path.exists(os.path.dirname(target)):
        os.makedirs(os.path.dirname(target))

    dst = str(target)
    g = open(dst, "w", encoding="utf-8")
    buf = ""
    docbegin = ""
    docend = ""
    for src in source:
        src_path = str(src)
        if not src_path.endswith(".xml"):
            continue
        with open(src_path, "r", encoding="utf-8") as f:
            content = f.read()
        buf += content

    buf = (docbegin + buf + docend).encode("utf-8")
    decomp_size = len(buf)

    # Use maximum zlib compression level to further reduce file size
    # (at the cost of initial build times).
    buf = zlib.compress(buf, zlib.Z_BEST_COMPRESSION)

    g.write("/* THIS FILE IS GENERATED DO NOT EDIT */\n")
    g.write("\n")

    g.write('static const char *_doc_data_hash = "' + str(hash(buf)) + '";\n')
    g.write("static const int _doc_data_uncompressed_size = " + str(decomp_size) + ";\n")
    g.write("static const int _doc_data_compressed_size = " + str(len(buf)) + ";\n")
    g.write("static const unsigned char _doc_data_compressed[] = {\n")
    for i in range(len(buf)):
        g.write("\t" + str(buf[i]) + ",\n")
    g.write("};\n")
    g.write("\n")

    g.write(
        "static godot::internal::DocDataRegistration _doc_data_registration(_doc_data_hash, _doc_data_uncompressed_size, _doc_data_compressed_size, _doc_data_compressed);\n"
    )
    g.write("\n")

    g.close()

def copy_plugins_with_skip(src_path, dst_path, file_extension, skip_plugins):
    if not os.path.exists(src_path):
        return
    if not os.path.exists(dst_path):
        os.makedirs(dst_path)

    for file_name in os.listdir(src_path):
        if file_name.endswith(file_extension):
            if any(plugin_name in file_name for plugin_name in skip_plugins):
                continue
            full_src_path = os.path.join(src_path, file_name)
            full_dst_path = os.path.join(dst_path, file_name)

            if os.path.exists(full_dst_path):
                print(f"\033[33mSkipped copying {file_name}; it already exists in {dst_path}\033[0m")
                continue
        
            shutil.copy2(full_src_path, full_dst_path)
            print(f"\033[32mCopied {file_name} to {dst_path}")

def copy_header_files_with_skip(src_path, dst_path, file_extension=".h", skip_plugins=None):
    if not os.path.exists(src_path):
        return
    if not os.path.exists(dst_path):
        os.makedirs(dst_path)
    if skip_plugins is None:
        skip_plugins = []

    for root, _, files in os.walk(src_path):
        for file_name in files:
            if file_name.endswith(file_extension):
                if any(plugin_name in file_name for plugin_name in skip_plugins):
                    continue
                full_src_path = os.path.join(root, file_name)
                relative_path = os.path.relpath(full_src_path, src_path)
                full_dst_path = os.path.join(dst_path, relative_path)

                if os.path.exists(full_dst_path):
                    print(f"\033[33mSkipped copying {file_name}; it already exists in {full_dst_path}\033[0m")
                    continue
            
                os.makedirs(os.path.dirname(full_dst_path), exist_ok=True)
                shutil.copy2(full_src_path, full_dst_path)
                print(f"\033[32mCopied header file {file_name} to {full_dst_path}")

skip_plugins = [
    "SineSource",
    "ToneSource",
    "SilenceGenerator",
    "SineTone",
    "ToneGen",
    "SilenceSource",
    "AkAudioInput",
    "Ak3DAudioBedMixer",
    "AkCompressor",
    "AkDelay",
    "AkExpander",
    "AkFlanger",
    "AkGain",
    "AkGuitarDistortion",
    "AkHarmonizer",
    "AkMatrixReverb",
    "AkMeter",
    "AkParametricEQ",
    "AkPeakLimiter",
    "AkPitchShifter",
    "AkRecorder",
    "AkRoomVerb",
    "AkStereoDelay",
    "AkSynthOne",
    "AkTimeStretch",
    "AkTremolo",
    "AkVorbisDecoder",
    "AkSoundEngine",
    "WwiseProjectDatabase",
    "CommunicationCentral",
    "SDL2",
    "ASIOSourceSinkFactory",
    "ASIO",
    "AkSinkFactory",
    "AkOpusDecoderFactory",
    "AllPluginsFactories",
    "AllPluginsRegistrationHelpers",
    "AkFXDurationHandler",
    "AkFXParameterChangeHandler",
    "AkFXTailHandler",
    "AkMixerInputMap",
    "AkValueRamp",
    "AkVectorValueRamp",
    "AkMotionSinkGameInputHelpers",
    "GME",
    "gme"
]

env = SConscript("godot-cpp/SConstruct")
opts = Variables([], ARGUMENTS)

# Define our options
opts.Add(
    PathVariable(
        "target_path",
        "The path where the lib is installed.",
        "lib",
        PathVariable.PathIsDirCreate,
    )
)
opts.Add(PathVariable("wwise_sdk", "The Wwise SDK path", "", PathVariable.PathAccept))
opts.Add(
    ListVariable(
        "plugins",
        "List of plugins",
        "",
        [
            "reflect",
            "motion",
            "convolution",
            "soundseed_grain",
            "soundseed_air",
            "impacter",
            "mastering_suite",
        ],
    )
)

opts.Add(EnumVariable("wwise_config", "Wwise Build Configuration", "debug", ["debug", "profile", "release"]))
opts.Add(EnumVariable("ios_arch", "Target iOS architecture", "arm64", ["arm64"]))
opts.Add("ios_min_version", "Target minimum iphoneos/iphonesimulator version", "12.0")
opts.Add(BoolVariable("ios_simulator", "Target iOS Simulator", False))
opts.Add(BoolVariable("asserts", "Enable AKASSERT for debug builds", "no"))
opts.Update(env)

file_extension = ""
if env["platform"] == "windows":
    file_extension = ".dll"
elif env["platform"] == "macos":
    file_extension = ".dylib"
elif env["platform"] == "linux":
    file_extension = ".so"
elif env["platform"] == "ios":
    file_extension = ".a"

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/gdextension/"
cpp_bindings_path = "godot-cpp/"

# Wwise dependency paths
wwise_sdk_headers_path = env["wwise_sdk"] + "/include/"
wwise_sdk_libs_path = ""
wwise_sdk_plugins_path = ""
wwise_soundengine_sample_path = ""

if env["platform"] == "windows":
    wwise_soundengine_sample_path = env["wwise_sdk"] + "/samples/SoundEngine/Win32/"
    if env["wwise_config"] == "debug":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/x64_vc170/Debug(StaticCRT)/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/x64_vc170/Debug/bin/"
    elif env["wwise_config"] == "profile":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/x64_vc170/Profile(StaticCRT)/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/x64_vc170/Profile/bin/"
    else:
        wwise_sdk_libs_path = env["wwise_sdk"] + "/x64_vc170/Release(StaticCRT)/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/x64_vc170/Release/bin/"

if env["platform"] == "macos":
    wwise_soundengine_sample_path = env["wwise_sdk"] + "/samples/SoundEngine/POSIX/"
    if env["wwise_config"] == "debug":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/Mac_Xcode1500/Debug/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/Mac_Xcode1500/Debug/bin/"
    elif env["wwise_config"] == "profile":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/Mac_Xcode1500/Profile/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/Mac_Xcode1500/Profile/bin/"
    else:
        wwise_sdk_libs_path = env["wwise_sdk"] + "/Mac_Xcode1500/Release/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/Mac_Xcode1500/Release/bin/"

if env["platform"] == "linux":
    wwise_soundengine_sample_path = env["wwise_sdk"] + "/samples/SoundEngine/POSIX/"
    if env["wwise_config"] == "debug":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/Linux_x64/Debug/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/Linux_x64/Debug/bin/"
    elif env["wwise_config"] == "profile":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/Linux_x64/Profile/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/Linux_x64/Profile/bin/"
    else:
        wwise_sdk_libs_path = env["wwise_sdk"] + "/Linux_x64/Release/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/Linux_x64/Release/bin/"

if env["platform"] == "ios" and not env["ios_simulator"]:
    wwise_soundengine_sample_path = env["wwise_sdk"] + "/samples/SoundEngine/POSIX/"
    if env["wwise_config"] == "debug":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/iOS_Xcode1500/Debug-iphoneos/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/iOS_Xcode1500/Debug-iphoneos/lib/"
    elif env["wwise_config"] == "profile":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/iOS_Xcode1500/Profile-iphoneos/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/iOS_Xcode1500/Profile-iphoneos/lib/"
    else:
        wwise_sdk_libs_path = env["wwise_sdk"] + "/iOS_Xcode1500/Release-iphoneos/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/iOS_Xcode1500/Release-iphoneos/lib/"

if env["platform"] == "ios" and env["ios_simulator"]:
    wwise_soundengine_sample_path = env["wwise_sdk"] + "/samples/SoundEngine/POSIX/"
    if env["wwise_config"] == "debug":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/iOS_Xcode1500/Debug-iphonesimulator/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/iOS_Xcode1500/Debug-iphonesimulator/lib/"
    elif env["wwise_config"] == "profile":
        wwise_sdk_libs_path = env["wwise_sdk"] + "/iOS_Xcode1500/Profile-iphonesimulator/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/iOS_Xcode1500/Profile-iphonesimulator/lib/"
    else:
        wwise_sdk_libs_path = env["wwise_sdk"] + "/iOS_Xcode1500/Release-iphonesimulator/lib/"
        wwise_sdk_plugins_path = env["wwise_sdk"] + "/iOS_Xcode1500/Release-iphonesimulator/lib/"

wwise_soundengine_sample_common_path = env["wwise_sdk"] + "/samples/SoundEngine/Common/"
wwise_soundengine_common_include_path = wwise_sdk_headers_path + "AK/SoundEngine/Common/"
wwise_soundengine_project_database_path = env["wwise_sdk"] + "/samples/WwiseProjectDatabase/"

## Wwise libs
wwise_memorymanager_library = "AkMemoryMgr"
wwise_soundengine_library = "AkSoundEngine"
wwise_musicengine_library = "AkMusicEngine"
wwise_streammanager_library = "AkStreamMgr"
wwise_communications_library = "CommunicationCentral"
wwise_plugins_library = [
    "AkGainFX",
    "AkHarmonizerFX",
    "AkStereoDelayFX",
    "AkTimeStretchFX",
    "AkTremoloFX",
    "AkGuitarDistortionFX",
    "AkVorbisDecoder",
    "AkOpusDecoder",
    "AkMeterFX",
    "AkPitchShifterFX",
    "AkRoomVerbFX",
    "AkPeakLimiterFX",
    "AkExpanderFX",
    "AkCompressorFX",
    "AkMatrixReverbFX",
    "AkParametricEQFX",
    "AkDelayFX",
    "AkSilenceSource",
    "AkToneSource",
    "AkFlangerFX",
    "AkSineSource",
    "AkRecorderFX",
    "AkAudioInputSource",
    "AkSynthOneSource",
    "AkSpatialAudio",
    "Ak3DAudioBedMixerFX",
]

## Plugins
if "reflect" in env["plugins"]:
    wwise_plugins_library.append("AkReflectFX")
    env.Append(CPPDEFINES=["AK_REFLECT"])

if "convolution" in env["plugins"]:
    wwise_plugins_library.append("AkConvolutionReverbFX")
    env.Append(CPPDEFINES=["AK_CONVOLUTION"])

if "soundseed_grain" in env["plugins"]:
    wwise_plugins_library.append("AkSoundSeedGrainSource")
    env.Append(CPPDEFINES=["AK_SOUNDSEED_GRAIN"])

if "soundseed_air" in env["plugins"]:
    wwise_plugins_library.append(
        ["AkSoundSeedWindSource", "AkSoundSeedWooshSource"]
    )
    env.Append(CPPDEFINES=["AK_SOUNDSEED_AIR"])

if "impacter" in env["plugins"]:
    wwise_plugins_library.append("AkImpacterSource")
    env.Append(CPPDEFINES=["AK_IMPACTER"])

if "mastering_suite" in env["plugins"]:
    wwise_plugins_library.append("MasteringSuiteFX")
    env.Append(CPPDEFINES=["AK_MASTERING_SUITE"])

if env["wwise_config"] == "debug":
    env.Append(CPPDEFINES=["AK_DEBUG"])
elif env["wwise_config"] == "profile":
    env.Append(CPPDEFINES=["AK_PROFILE"])
else:
    env.Append(CPPDEFINES=["AK_RELEASE"])

if env["target"] == "template_debug":
    env.Append(CPPDEFINES=["TEMPLATE_DEBUG"])
elif env["target"] == "template_release":
    env.Append(CPPDEFINES=["TEMPLATE_RELEASE"])

# Windows build settings
if env["platform"] == "windows":
    env["target_path"] += "/win64/"
    if env["target"] in ("template_debug"):
        env["target_path"] += "template_debug/"
        if env["dev_build"] or env["wwise_config"] in ("debug"):
            env["target_path"] += "debug/"
            env.Append(CPPDEFINES=["_DEBUG"])
            env.Append(LINKFLAGS=["-DEBUG"])
            env.Append(CCFLAGS=["/MTd"])
            if env["asserts"]:
                env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
        else:
            env["target_path"] += "profile/"
            env.Append(CPPDEFINES=["NDEBUG"])
    else:
        if env["target"] in ("editor"):
            env["target_path"] += "editor/"
            make_doc_source("src/gen/doc_data.gen.cpp", Glob("doc_classes/*.xml"), env)
            if env["dev_build"] or env["wwise_config"] in ("debug"):
                env["target_path"] += "debug/"
                env.Append(CPPDEFINES=["_DEBUG"])
                env.Append(LINKFLAGS=["-DEBUG"])
                env.Append(CCFLAGS=["/MTd"])
                if env["asserts"]:
                    env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
            else:
                env["target_path"] += "profile/"
                env.Append(CPPDEFINES=["NDEBUG"])
        else:
            env["target_path"] += "template_release/" 
            env["target_path"] += "release/"
            env.Append(CPPDEFINES=["AK_OPTIMIZED"])
            env.Append(CPPDEFINES=["NDEBUG"])

    if "motion" in env["plugins"]:
        wwise_plugins_library.append(["AkMotionSink", "AkMotionSourceSource"])
        env.Append(CPPDEFINES=["AK_MOTION"])

    env.Append(
        CPPDEFINES=["WIN32", "_WIN32", "_WINDOWS", "_CRT_SECURE_NO_WARNINGS", "UNICODE"]
    )

    env.Append(CCFLAGS=["/std:c++20", "/bigobj"])
    env.Append(LINKFLAGS=["/INCREMENTAL:NO"])
    env['CXXFLAGS'] = [flag for flag in env['CXXFLAGS'] if flag != '/std:c++17']

# macOS build settings
elif env["platform"] == "macos":
    env["target_path"] += "/macos/"
    if env["target"] in ("template_debug"):
        env["target_path"] += "template_debug/"
        if env["dev_build"] or env["wwise_config"] in ("debug"):
            env["target_path"] += "debug/"
            env.Append(CPPDEFINES=["_DEBUG"])
            env.Append(LINKFLAGS=["-DEBUG"])
            if env["asserts"]:
                env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
        else:
            env["target_path"] += "profile/"
            env.Append(CPPDEFINES=["NDEBUG"])
    else:
        if env["target"] in ("editor"):
            env["target_path"] += "editor/"
            make_doc_source("src/gen/doc_data.gen.cpp", Glob("doc_classes/*.xml"), env)
            if env["dev_build"] or env["wwise_config"] in ("debug"):
                env["target_path"] += "debug/"
                env.Append(CPPDEFINES=["_DEBUG"])
                env.Append(LINKFLAGS=["-DEBUG"])
                if env["asserts"]:
                    env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
            else:
                env["target_path"] += "profile/"
                env.Append(CPPDEFINES=["NDEBUG"])
            env.Append(CXXFLAGS=["-fexceptions"])
        else:
            env["target_path"] += "template_release/" 
            env["target_path"] += "release/"
            env.Append(CPPDEFINES=["AK_OPTIMIZED"])
            env.Append(CPPDEFINES=["NDEBUG"])

    env.Append(CXXFLAGS=["-std=c++20"])

    macos_install_name = "@rpath/libwwise.{}.{}.framework/libwwise.{}.{}.{}".format(
        env["platform"], env["target"], env["platform"], env["target"], env["wwise_config"]
    )

    env.Append(
        LINKFLAGS=[
            "-framework",
            "CoreAudio",
             "-framework",
            "AVFoundation",
            "-Wl,-undefined,dynamic_lookup",
            "-Wl,-rpath,@loader_path",
            "-Wl,-rpath,@loader_path/../DSP",
            "-Wl,-install_name,{}".format(macos_install_name),
        ]
    )

# Linux build settings
elif env["platform"] == "linux":
    env["CXX"] = "g++-11"
    env["target_path"] += "/linux/"
    if env["target"] in ("template_debug"):
        env["target_path"] += "template_debug/"
        if env["dev_build"] or env["wwise_config"] in ("debug"):
            env["target_path"] += "debug/"
            env.Append(CPPDEFINES=["_DEBUG"])
            env.Append(LINKFLAGS=["-DEBUG"])
            if env["asserts"]:
                env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
        else:
            env["target_path"] += "profile/"
            env.Append(CPPDEFINES=["NDEBUG"])
    else:
        if env["target"] in ("editor"):
            env["target_path"] += "editor/"
            make_doc_source("src/gen/doc_data.gen.cpp", Glob("doc_classes/*.xml"), env)
            if env["dev_build"] or env["wwise_config"] in ("debug"):
                env["target_path"] += "debug/"
                env.Append(CPPDEFINES=["_DEBUG"])
                env.Append(LINKFLAGS=["-DEBUG"])
                if env["asserts"]:
                    env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
            else:
                env["target_path"] += "profile/"
                env.Append(CPPDEFINES=["NDEBUG"])
            env.Append(CXXFLAGS=["-fexceptions"])
        else:
            env["target_path"] += "template_release/" 
            env["target_path"] += "release/"
            env.Append(CPPDEFINES=["AK_OPTIMIZED"])
            env.Append(CPPDEFINES=["NDEBUG"])

    env.Prepend(_LIBFLAGS="-Wl,--start-group ")
    env.Append(_LIBFLAGS=" -Wl,--end-group")

    env.Append(CCFLAGS=["-fPIC", "-Wwrite-strings"])
    env.Append(CXXFLAGS=["-std=c++20"])
    env.Append(LINKFLAGS=["-Wl,-R,'$$ORIGIN'"])

# iOS build settings
elif env["platform"] == "ios":
    env["target_path"] += "/ios/"

    if env["ios_arch"] == "arm64":
        env["target_path"] += "arm64/"

    if env["target"] in ("template_debug"):
        env["target_path"] += "template_debug/"
        if env["dev_build"] or env["wwise_config"] in ("debug"):
            env["target_path"] += "debug/"
            env.Append(CPPDEFINES=["_DEBUG"])
            env.Append(LINKFLAGS=["-DEBUG"])
            if env["asserts"]:
                env.Append(CPPDEFINES=["AK_ENABLE_ASSERTS"])
        else:
            env["target_path"] += "profile/"
            env.Append(CPPDEFINES=["NDEBUG"])
    else:
        env["target_path"] += "template_release/" 
        env["target_path"] += "release/"
        env.Append(CPPDEFINES=["AK_OPTIMIZED"])
        env.Append(CPPDEFINES=["NDEBUG"])

    if env["ios_arch"] == "x86_64":
        sdk_name = "iphonesimulator"
        env.Append(
            CCFLAGS=["-mios-simulator-version-min={}".format(env["ios_min_version"])]
        )
        env.Append(
            LINKFLAGS=["-mios-simulator-version-min={}".format(env["ios_min_version"])]
        )
    else:
        sdk_name = "iphoneos"
        env.Append(CCFLAGS=["-miphoneos-version-min={}".format(env["ios_min_version"])])
        env.Append(
            LINKFLAGS=["-miphoneos-version-min={}".format(env["ios_min_version"])]
        )

    try:
        sdk_path = decode_utf8(
            subprocess.check_output(
                ["xcrun", "--sdk", sdk_name, "--show-sdk-path"]
            ).strip()
        )
    except (subprocess.CalledProcessError, OSError):
        raise ValueError(
            "Failed to find SDK path while running xcrun --sdk {} --show-sdk-path.".format(
                sdk_name
            )
        )

    env.Append(
        CCFLAGS=[
            "-arch",
            env["ios_arch"],
            "-isysroot",
            sdk_path,
        ]
    )

    env.Append(CXXFLAGS=["-std=c++20"])

    ios_install_name = "@rpath/libwwise.{}.{}.{}.framework/libwwise.{}.{}.{}".format(
        env["platform"], env["target"], env["wwise_config"], env["platform"], env["target"], env["wwise_config"]
    )

    env.Append(
        LINKFLAGS=[
            "-arch",
            env["ios_arch"],
            "-miphoneos-version-min=" + env["ios_min_version"],
            "-framework",
            "AudioToolbox",
            "-framework",
            "AVFoundation",
            "-Wl,-undefined,dynamic_lookup",
            "-Wl,-install_name,{}".format(ios_install_name),
            "-isysroot",
            sdk_path,
            "-F" + sdk_path,
        ]
    )

# godot-cpp settings
env.Append(
    CPPPATH=[
        ".",
        godot_headers_path,
        cpp_bindings_path + "include/",
        cpp_bindings_path + "include/core/",
        cpp_bindings_path + "include/gen/",
    ]
)
env.Append(LIBPATH=[cpp_bindings_path + "bin/"])

env.Append(CPPPATH=["src/"])

sources = []
sources.append("src/wwise_gdextension_main.cpp")

if env["platform"] == "windows" or env["platform"] == "macos":
    env.Append(LIBS=["AkAutobahn"])

if env["target"] in ("editor"):
    env.Append(CPPPATH=[wwise_soundengine_project_database_path, wwise_soundengine_project_database_path + "WwiseProjectDatabase", env["wwise_sdk"] + "/samples/3rdParty/subprojects/rapidjson/include"])
    env.Append(CPPDEFINES=["WWISE_DB_STANDARD_TYPES", "TESTING_WWISE_PROJECT_DATABASE"])

# Wwise specific configuration
env.Append(CPPPATH=[wwise_sdk_headers_path, wwise_soundengine_sample_path, wwise_soundengine_sample_common_path, wwise_soundengine_common_include_path])
env.Append(LIBPATH=[wwise_sdk_libs_path])
env.Append(
    LIBS=[
        wwise_memorymanager_library,
        wwise_soundengine_library,
        wwise_streammanager_library,
        wwise_musicengine_library,
        wwise_plugins_library,
    ]
)

if env["target"] in ("editor", "template_debug"):
    env.Append(LIBS=[wwise_communications_library])

    if env["platform"] == "windows":
        env.Append(LIBS=["msacm32", "ws2_32"])

if env["target"] == "editor" and env["platform"] == "linux":
    env.Append(LIBS=["tbb"])

if env["platform"] == "windows":
    env.Append(LIBS=["advapi32", "user32", "ole32"])
if env["platform"] == "windows" and "motion" in env["plugins"]:
    env.Append(LIBS=["XInput", "Dinput8", "Winmm", "oleaut32"])
if env["platform"] == "linux":
    env.Append(LIBS=["pthread", "dl"])

if env["platform"] == "windows":
    library = env.SharedLibrary(
        target=env["target_path"]
        + "libwwise.{}.{}.{}.dll".format(env["platform"], env["target"], env["wwise_config"]),
        source=sources,
    )

if env["platform"] == "macos":
    library = env.SharedLibrary(
        target=env["target_path"]
        + "libwwise.{}.{}.{}.framework/libwwise.{}.{}.{}".format(
            env["platform"], env["target"], env["wwise_config"], env["platform"], env["target"], env["wwise_config"]
        ),
        source=sources,
    )

if env["platform"] == "linux":
    import shutil

    library = env.SharedLibrary(
        target=env["target_path"]
        + "libwwise.{}.{}.{}.so".format(env["platform"], env["target"], env["wwise_config"]),
        source=sources,
    )

if env["platform"] == "ios":
    ios_lib_path = env[
        "target_path"
    ] + "libwwise.{}.{}.{}.framework/libwwise.{}.{}.{}".format(
        env["platform"], env["target"], env["wwise_config"], env["platform"], env["target"], env["wwise_config"]
    )

    library = env.SharedLibrary(
        target=ios_lib_path,
        source=sources,
    )

    output_file = "Info.plist"
    output_dir = env["target_path"] + "libwwise.{}.{}.{}.framework".format(
        env["platform"], env["target"], env["wwise_config"]
    )

    env.Replace(LIB_NAME="libwwise.{}.{}.{}".format(env["platform"], env["target"], env["wwise_config"]))
    env.Replace(MIN_IOS_VERSION=env["ios_min_version"])

    def create_output_file(target, source, env):
        # Create the output directory if it doesn't exist
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        lib_name = "libwwise.{}.{}.{}".format(env["platform"], env["target"], env["wwise_config"])

        with open(os.path.join(output_dir, output_file), "w") as f:
            xml_text = """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleShortVersionString</key>
<string>1.0</string>
<key>CFBundleIdentifier</key>
<string>com.gdextension.framework.{}</string>
<key>CFBundleName</key>
<string>{}</string>
<key>CFBundleExecutable</key>
<string>{}</string>
<key>DTPlatformName</key>
<string>iphoneos</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleVersion</key>
<string>1</string>
<key>CFBundlePackageType</key>
<string>FMWK</string>
<key>MinimumOSVersion</key>
<string>{}</string>
</dict>
</plist>""".format(
                lib_name.replace("_", "-"), lib_name, lib_name, env["ios_min_version"]
            )

            unescaped_text = html.unescape(xml_text)
            f.write(unescaped_text)
        return None

    target = os.path.join(output_dir, output_file)
    create_output_file_action = Action(target, create_output_file)
    AddPostAction(library, create_output_file)

Default(library)

print_section_header("Wwise Godot Integration: Build Info")
print_project_info(env)

print_section_header("Copying Plugins")
dsp_target_path = os.path.join(env["target_path"], "DSP")
copy_plugins_with_skip(wwise_sdk_plugins_path, dsp_target_path, file_extension, skip_plugins)

if env["platform"] == "ios":
    print_section_header("Copying iOS Plugin Headers")
    plugin_header_src_path = os.path.join(wwise_sdk_headers_path, "AK", "Plugin")
    copy_header_files_with_skip(plugin_header_src_path, dsp_target_path, skip_plugins=skip_plugins)

print_section_header("Compiling GDExtension")

Help(opts.GenerateHelpText(env))